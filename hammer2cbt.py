#!/usr/bin/env python3

import argparse

note_name = [
"FX_C_0", "FX_Cs0", "FX_D_0", "FX_Ds0", "FX_E_0", "FX_F_0", "FX_Fs0", "FX_G_0", "FX_Gs0", "FX_A_0", "FX_As0", "FX_B_0",
"FX_C_1", "FX_Cs1", "FX_D_1", "FX_Ds1", "FX_E_1", "FX_F_1", "FX_Fs1", "FX_G_1", "FX_Gs1", "FX_A_1", "FX_As1", "FX_B_1",
"FX_C_2", "FX_Cs2", "FX_D_2", "FX_Ds2", "FX_E_2", "FX_F_2", "FX_Fs2", "FX_G_2", "FX_Gs2", "FX_A_2", "FX_As2", "FX_B_2",
"FX_C_3", "FX_Cs3", "FX_D_3", "FX_Ds3", "FX_E_3", "FX_F_3", "FX_Fs3", "FX_G_3", "FX_Gs3", "FX_A_3", "FX_As3", "FX_B_3",
"FX_C_4", "FX_Cs4", "FX_D_4", "FX_Ds4", "FX_E_4", "FX_F_4", "FX_Fs4", "FX_G_4", "FX_Gs4", "FX_A_4", "FX_As4", "FX_B_4",
"FX_C_5", "FX_Cs5", "FX_D_5", "FX_Ds5", "FX_E_5", "FX_F_5", "FX_Fs5", "FX_G_5", "FX_Gs5", "FX_A_5", "FX_As5", "FX_B_5"]

buffer_array_length = [0] * 32
buffer_array_ch2pan = [0] * 32
buffer_array_ch2vol = [0] * 32
buffer_array_ch2duty = [0] * 32
buffer_array_ch2note = [0] * 32
buffer_array_ch4pan = [0] * 32
buffer_array_ch4vol = [0] * 32
buffer_array_ch4freq = [0] * 32

channels_used_string = [""] * 52
channels_used_string[0] = "No channels (...Empty?)"
channels_used_string[3] = "Noise channel"
channels_used_string[48] = "Duty channel 2"
channels_used_string[51] = "Duty channel 2 & Noise channel"

buffer_length = 0
buffer_channels_used = 0
buffer_priority = 0

def update_c_header(file, leng, b):
	return """/*

	""" + file + """

	Sound Effect File.

	Info:
		Length			:	""" + str(leng) + """
		Bank			:	""" + str(b) + """
		Priority		:	""" + str(buffer_priority) + """
		Channels used	:	""" + channels_used_string[buffer_channels_used] + """

	This file was generated by hammer2cbt

*/
"""
def clamp(n, smallest, largest): 
	return max(smallest, min(n, largest))

parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input", help = "Input FX Hammer .sav file", type = str)
parser.add_argument("-o", "--output", help = "Output folder for .c/.h files", type = str)
parser.add_argument("-b", "--bank", help = "Optional bank number", type = int)
parser.add_argument("-dp", "--dpath", help = "Optional path to CBT-FX (F.E '-dp include/cbtfx.h', default is 'cbtfx.h')", type = str)
parser.add_argument("-na", "--name", help = "Optional effect name (Default is 'SFX_' Followed by the effect number)", type = str)
parser.add_argument("-nu", "--number", help = "Effect number to export", type = int)
parser.add_argument("-lr", "--invert", help = "Invert FX Hammer pan values (Editor is inverted)")

args = parser.parse_args()

input_sav = args.input

output_folder = ""
if args.output:
	output_folder = args.output + "/"

FXHammer_sfx = 0
if args.number:
	FXHammer_sfx = args.number

buffer_name = "SFX_" + (("{0:X}").format(FXHammer_sfx)).zfill(2)
if args.name:
	buffer_name = args.name

buffer_bank = 0
if args.bank:
	buffer_bank = args.bank

default_path = "cbtfx.h"
if args.dpath:
	default_path = args.dpath

FXHammer_file = open(input_sav, "rb")
FXHammer_file.seek(0x400 + (FXHammer_sfx * 256))
buffer_length = 0
for x in range(32):
	buffer_array_length[x] = int.from_bytes(FXHammer_file.read(1), "big")
	if buffer_array_length[x] == 0:
		buffer_length += 1 # This is to avoid adding 1 to the length in the driver and save some space
		break
	buffer_array_ch2pan[x] = int.from_bytes(FXHammer_file.read(1), "big") >> 1
	buffer_array_ch2vol[x] = int.from_bytes(FXHammer_file.read(1), "big") >> 4
	buffer_array_ch2duty[x] = (int.from_bytes(FXHammer_file.read(1), "big") >> 6)
	buffer_array_ch2note[x] = (int.from_bytes(FXHammer_file.read(1), "big") - 0x40) / 2
	buffer_array_ch4pan[x] = int.from_bytes(FXHammer_file.read(1), "big") >> 3
	buffer_array_ch4vol[x] = int.from_bytes(FXHammer_file.read(1), "big") >> 4
	buffer_array_ch4freq[x] = int.from_bytes(FXHammer_file.read(1), "big")
	if args.invert:
		buffer_array_ch2pan[x] =((buffer_array_ch2pan[x] & 0x0F) << 4 | (buffer_array_ch2pan[x] & 0xF0) >> 4)
		buffer_array_ch4pan[x] =((buffer_array_ch4pan[x] & 0x0F) << 4 | (buffer_array_ch4pan[x] & 0xF0) >> 4)
	buffer_length += 1
FXHammer_file.seek(0x300 + FXHammer_sfx)
buffer_channels_used = int.from_bytes(FXHammer_file.read(1), "big")
FXHammer_file.seek(0x200 + FXHammer_sfx)
buffer_priority = int.from_bytes(FXHammer_file.read(1), "big")
FXHammer_file.close()

C_file_out = open(output_folder + buffer_name + ".c", "w")
if buffer_bank > 0:
	C_file_out.write("#pragma bank " + str(buffer_bank) + "\n")
C_file_out.write(update_c_header(buffer_name, buffer_length, buffer_bank))
C_file_out.write("""#define """ + buffer_name + """_Length """ + str(buffer_length) + """\n#define """ + buffer_name + """_Bank """ + str(buffer_bank) + """\n#define """ + buffer_name + """_CH_Used """ + str(buffer_channels_used << 2 | buffer_channels_used) + """\n#define """ + buffer_name + """_Priority """ + str(buffer_priority))
C_file_out.write("\n#define CBTFX_PLAY_" + buffer_name + " CBTFX_init(&" + buffer_name + "[0][0], " + str(buffer_length) + ", " + str(buffer_priority) + ", " + str(buffer_channels_used << 2 | buffer_channels_used) + ")")
C_file_out.write('\n#include "' + default_path + '"\n')
if buffer_bank > 0:
	C_file_out.write("\nconst void __at(" + str(buffer_bank) +") __bank_" + buffer_name +";")
C_file_out.write("\nconst unsigned char " + buffer_name +"[" + str(buffer_length) +"][CBTFX_LENGTH] = {\n")

for x in range(0, 32):
	if buffer_array_length[x] == 0:
		break
	C_file_out.write("	CBTFX_FRAME(" + str(buffer_array_length[x]) + ", " + str(buffer_array_ch2pan[x]) + ", " + str(buffer_array_ch2vol[x]) + ", " + str(buffer_array_ch2duty[x]) + ", "  + str(note_name[int(buffer_array_ch2note[x])]) + ", " + str(buffer_array_ch4pan[x]) + ", " + str(buffer_array_ch4vol[x])+ ", " + str(buffer_array_ch4freq[x]) +")")
	if not buffer_array_length[int(clamp(x + 1, 0, 32))] == 0:
		C_file_out.write(",\n")
	else:
		break
C_file_out.write("\n};")
C_file_out.close()

H_file_out = open(output_folder + buffer_name + ".h", "w")

H_file_out.write(update_c_header(buffer_name, buffer_length, buffer_bank))
H_file_out.write("#ifndef __" + buffer_name + "_h_INCLUDE\n")
H_file_out.write("#define __" + buffer_name + "_h_INCLUDE\n")
H_file_out.write("""#define """ + buffer_name + """_Length """ + str(buffer_length) + """\n#define """ + buffer_name + """_Bank """ + str(buffer_bank) + """\n#define """ + buffer_name + """_CH_Used """ + str(buffer_channels_used << 2 | buffer_channels_used) + """\n#define """ + buffer_name + """_Priority """ + str(buffer_priority))
H_file_out.write("\n#define CBTFX_PLAY_" + buffer_name + " CBTFX_init(&" + buffer_name + "[0][0], " + str(buffer_length) + ", " + str(buffer_priority) + ", " + str(buffer_channels_used << 2 | buffer_channels_used) + ")")
if buffer_bank > 0:
	H_file_out.write("\nextern const void __bank_" + buffer_name +";")
H_file_out.write("\nextern const unsigned char " + buffer_name +"[" + str(buffer_length) +"][CBTFX_LENGTH];\n")
H_file_out.write("#endif")
H_file_out.close()
